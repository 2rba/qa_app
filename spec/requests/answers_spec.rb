# frozen_string_literal: true
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/answers', type: :request do
  let(:question) { Question.create!(user: user, body: 'what?') }
  let(:answer) { Answer.create!(user: user, question: question, body: 'for sure') }
  let(:user) { User.create!(email: 'user@email', password: 'password') }
  let(:login) { sign_in user }

  before do
    login
    answer
  end

  describe 'GET /question/:id' do
    it 'renders answers as well' do
      get question_url(question)
      expect(response).to be_successful
      expect(response.body).to have_selector('div', text: 'for sure')
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Answer' do
        expect do
          post answers_url, params: { answer: { body: 'another answer', question_id: question.id } }
        end.to change(Answer, :count).by(1)
        expect(response).to redirect_to(question_url(question))
        follow_redirect!
        expect(response.body).to have_selector('.notice', text: 'Answer was successfully created.')
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Answer' do
        expect do
          post answers_url, params: { answer: { body: '', question_id: question.id } }
        end.to change(Answer, :count).by(0)
        expect(response).to redirect_to(question_url(question))
        follow_redirect!
        expect(response.body).to have_selector('.alert', text: "Body can't be blank")
      end
    end
  end
end
